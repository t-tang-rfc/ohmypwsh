@file: 07-Panda/M1/ohmypwsh/tickets.txt

=== Ticket 1

@brief:
Create a oh-my-zsh inspired PowerShell custom prompt, w/ light/dark theme.

@status: INPROGRESS

@date:
- initiated on 2024-11-16
- updated on 2024-11-19

--- Ticket 1-1

@brief:
Add proper color scheme for the 3 major fields of terminal prompt---user name, machine name, and path.

@status: DONE

@date:
- initiated on 2024-11-16
- updated on 2024-11-23

@details:
Need to use a hashtable to hold each prompt color component in a separate field.
In the past, I have spent quite a lot of time on an utility `SwitchTheme` that switches not only the terminmal prompt, but also macOS system wide dark/light theme, with automatical trigger by sunrise/sunset.
This time, I plan to create a PowerShell function `Switch-Theme ['dark' | 'light']`.
Given those experience tweaking w/ system-wide theme altogether, I decide this function should go into the platform-dependent utility category, and I first implement it in `macos-pwsh-conf.ps1`.

--- Ticket 1-2

@brief:
Configure the [PSReadline](https://github.com/PowerShell/PSReadLine) color scheme to suit my light/dark theme.

@status: INPROGRESS

@date:
- initiated on 2024-11-23
- updated on 2024-11-23

@details:
Although the PSReadLine affects most of the "readline", not rigorously the prompt itself, together w/ the prompt, it is important for the user experience (UX) in the Read–eval–print loop (REPL) framework. Therefore, I consider this as a sub-task for creating the light/dark theme.
I plan to use minimal color for the readline, since using many colors will only result in a visual chaos.
As colors should only be used sporadically, they should be *pop-up*.
As for the light theme, which will generally based on a white background, I prefer *blue* as the main color.
As for the dark theme, which will generally based on a near-black background, I prefer *yellow* as the main color.
