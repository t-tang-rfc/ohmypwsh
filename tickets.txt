+++ header
@file: ohmypwsh/tickets.txt
+++

=== Ticket 1

@brief:
Create a oh-my-zsh inspired PowerShell custom prompt, w/ light/dark theme.

@status: PROGRESSING

@date:
- created on 2024-11-16
- updated on 2024-11-19

--- Ticket 1-1

@brief:
Add proper color scheme for the 3 major fields of terminal prompt---user name, machine name, and path.

@status: DONE

@date:
- created on 2024-11-16
- updated on 2024-11-23

@details:
Need to use a hashtable to hold each prompt color component in a separate field.
In the past, I have spent quite a lot of time on an utility `SwitchTheme` that switches not only the terminmal prompt, but also macOS system wide dark/light theme, with automatical trigger by sunrise/sunset.
This time, I plan to create a PowerShell function `Switch-Theme ['dark' | 'light']`.
Given those experience tweaking w/ system-wide theme altogether, I decide this function should go into the platform-dependent utility category, and I first implement it in `macos-pwsh-conf.ps1`.

--- Ticket 1-2

@brief:
Configure the [PSReadline](https://github.com/PowerShell/PSReadLine) color scheme to suit my light/dark theme.

@status: PROGRESSING

@date:
- created on 2024-11-23
- updated on 2024-11-23

@details:
Although the PSReadLine affects most of the "readline", not rigorously the prompt itself, together w/ the prompt, it is important for the user experience (UX) in the Read–eval–print loop (REPL) framework. Therefore, I consider this as a sub-task for creating the light/dark theme.
I plan to use minimal color for the readline, since using many colors will only result in a visual chaos.
As colors should only be used sporadically, they should be *pop-up*.
As for the light theme, which will generally based on a white background, I prefer *blue* as the main color.
As for the dark theme, which will generally based on a near-black background, I prefer *yellow* as the main color.

=== Ticket 2

@brief:
Add `Mount-Workspace` command.

@status: DONE

@date:
- created on 2025-01-16
- updated on 2025-01-16

@details:
The command `Mount-Workspace` mounts remote storage into local file-system as "Workspace[\d]".
This command should be *machine-dependent*, since each machine is used in specific setup (w/ different local Workspace, and available remote Workspaces).

--- Ticket 2-1

@brief:
Add `Mount-Workspace` for my personal Mac to mount the routine remote workspace, as a pilot test.

@date:
- created on 2025-01-16
- updated on 2025-01-18

@status: DONE

@details:
- The function only handles a specific workspace Identifier `W4`
- It should hard-code NO secret in the script
- The function call requires all parameters to be passed in, including the remote storage URL, the local mount point, and the username/password.

--- Ticket 2-2

@brief:
Make `Mount-Workspace W4` work as it is, w/o provide any additional parameters.

@status: DONE

@date:
- created on 2025-01-18
- updated on 2025-01-19

@details:
By using an external JSON file, the function can auto load the parameters (w/o cache) per call, and fill all the necessary parameters for the `Mount-Workspace` function.
As long as the JSON file is not exposed to the public, the secret info. should be safe.
Beyonds that, I added one more layer of security---instead of reading info. from a plain JSON file, I use an GPG-encrypted JSON file, and decrypt it on-the-fly.
This method fits well for the scenario of *device-dependent* `Mount-Workspace` function.

=== Ticket 3

@brief:
Create a `develop` branch for the `ohmypwsh` repository, and push it to remote `github` (on GitHub).

@status: DONE

@date:
- created on 2025-01-18
- updated on 2025-01-18

@details:
Since this is spin-off from a private project, I must confirm that no secret info. is leaked in the public repository.
